#include <stdio.h>
#include <stdlib.h>

int path[20];                                    // Store the path
int n;                                           // Number of nodes
int g(int k, int *v, int c[][20]);               // Cost function
void trvpath(int k, int *v, int c[][20], int j); // Traversal function

void main()
{
    int mcost;
    path[0] = 1;

    printf("Enter the number of nodes (N):\n");
    scanf("%d", &n);

    int c[20][20];   // Adjacency matrix, assuming max size of 20 for simplicity
    int v[20] = {0}; // Visited array initialized to 0
    int j = 1;

    path[n] = 1; // Mark end of the path to start from node 1 again

    printf("Enter adjacency matrix:\n");
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            scanf("%d", &c[i][j]);
        }
    }

    printf("Adjacency Matrix:\n");
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            printf("%d\t", c[i][j]);
        }
        printf("\n");
    }

    v[1] = 1;           // Starting from node 1, mark it visited
    mcost = g(1, v, c); // Calculate minimum cost

    for (int i = 1; i <= n; i++)
        v[i] = 0; // Reset visited array
    v[1] = 1;

    trvpath(1, v, c, j); // Find the traversal path

    printf("Minimum cost is: %d\n", mcost);
    printf("Path: ");
    for (int i = 0; i <= n; i++)
    {
        printf("%d-", path[i]);
    }
    printf("\n");
}

int g(int k, int *v, int c[][20])
{
    int min = 999, temp, flag = 0;

    // Check if all nodes are visited
    for (int i = 2; i <= n; i++)
    {
        if (v[i] == 0)
            flag = 1;
    }

    if (flag == 0)
        return c[k][1]; // Return to the starting node

    for (int i = 2; i <= n; i++)
    {
        if (v[i] == 0)
        {
            v[i] = 1;                    // Mark node as visited
            temp = c[k][i] + g(i, v, c); // Recursive call to find cost
            if (temp < min)
                min = temp; // Find minimum cost
            v[i] = 0;       // Unmark node after recursion
        }
    }
    return min;
}

void trvpath(int k, int *v, int c[][20], int j)
{
    int temp, min = 999, t;
    int v1[20];

    if (j < n)
    {
        for (int i = 2; i <= n; i++)
        {
            if (v[i] == 0)
            {
                v[i] = 1;
                temp = c[k][i] + g(i, v, c);
                if (temp < min)
                {
                    min = temp;
                    t = i;
                    for (int i = 1; i <= n; i++)
                        v1[i] = v[i]; // Copy visited array
                }
                v[i] = 0;
            }
        }
        path[j] = t;
        trvpath(t, v1, c, j + 1);
    }
}




//iput output
Enter the number of nodes (N):
4
Enter adjacency matrix:
0 9 8 8
12 0 13 6
10 9 0 5
20 15 10 0
Adjacency Matrix:
0	9	8	8	
12	0	13	6	
10	9	0	5	
20	15	10	0	
Minimum cost is: 35
Path: 1-2-4-3-1-
